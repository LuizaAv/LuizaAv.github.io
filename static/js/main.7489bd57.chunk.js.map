{"version":3,"sources":["Components/Inputs.js","App.js","serviceWorker.js","index.js"],"names":["regExp","Inputs","state","color","backgroundColor","changeInput","event","setState","target","value","changeHandler","test","styles","this","onChange","placeholder","className","style","Component","App","name","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAKMA,G,MAAS,sCA2DAC,E,2MAxDbC,MAAQ,CACNC,MAAO,GACPC,gBAAiB,I,EAGnBC,YAAc,SAAAC,GAEV,EAAKC,SAAS,CACZJ,MAAOG,EAAME,OAAOC,S,EAK1BC,cAAgB,SAAAJ,GACXN,EAAOW,KAAKL,EAAME,OAAOC,QAC1B,EAAKF,SAAS,CACZH,gBAAiBE,EAAME,OAAOC,S,wEAMlC,IAAMG,EAAS,CACbT,MAAOU,KAAKX,MAAMC,MAClBC,gBAAiBS,KAAKX,MAAME,iBAG9B,OACE,6BACE,2BACEU,SAAUD,KAAKR,YACfU,YAAY,oBACZC,UAAU,WAGZ,2BACEF,SAAUD,KAAKH,cACfK,YAAY,0BACZC,UAAU,WAEZ,uBAAGA,UAAU,aAAaC,MAAOL,GAAjC,eAGA,uBAAGI,UAAU,aAAaC,MAAOL,GAAjC,eAEI,uBAAGI,UAAU,aAAaC,MAAOL,GAAjC,eAEA,uBAAGI,UAAU,aAAaC,MAAOL,GAAjC,eAEA,uBAAGI,UAAU,aAAaC,MAAOL,GAAjC,oB,GAlDSM,aCHfC,E,YACJ,aAAe,IAAD,8BACZ,+CACKjB,MAAQ,CACXkB,KAAM,SAHI,E,sEAQZ,OACE,6BACE,kBAAC,EAAD,W,GAXUF,aAiBHC,IACfE,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCVpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7489bd57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"./Inputs.css\";\r\n\r\n\r\nconst regExp = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/\r\n\r\nclass Inputs extends Component {\r\n  state = {\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  };\r\n\r\n  changeInput = event => {\r\n    {\r\n      this.setState({\r\n        color: event.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  changeHandler = event => {\r\n    if(regExp.test(event.target.value)){\r\n      this.setState({\r\n        backgroundColor: event.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const styles = {\r\n      color: this.state.color,\r\n      backgroundColor: this.state.backgroundColor\r\n    };\r\n    \r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={this.changeInput}\r\n          placeholder=\"change text color\"\r\n          className=\"inputs\"\r\n          \r\n        />\r\n        <input\r\n          onChange={this.changeHandler}\r\n          placeholder=\"change background color\"\r\n          className=\"inputs\"\r\n        />\r\n        <p className=\"paragraphs\" style={styles}>\r\n          Hello react\r\n        </p>\r\n        <p className=\"paragraphs\" style={styles}>\r\n          Hello react\r\n        </p><p className=\"paragraphs\" style={styles}>\r\n          Hello react\r\n        </p><p className=\"paragraphs\" style={styles}>\r\n          Hello react\r\n        </p><p className=\"paragraphs\" style={styles}>\r\n          Hello react\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Inputs;\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Inputs from \"./Components/Inputs\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"React\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Inputs />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\nrender(<App />, document.getElementById(\"root\"));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}